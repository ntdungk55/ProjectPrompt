# Clean Architecture MASTER Prompt v5 (Backbone + Conventions + Execution + Enterprise Essentials)

## Mc Lc
1. [Vai Tr & m Bo](#1-vai-tr--m-bo)
2. [Nguyn Tc Kin Trc](#2-nguyn-tc-kin-trc)
3. [Cu Trc D n](#3-cu-trc-d-n)
4. [Tiu Chun Code & Quy c](#4-tiu-chun-code--quy-c)
5. [X L Li & Constants](#5-x-l-li--constants)
6. [Yu Cu Phi Chc Nng](#6-yu-cu-phi-chc-nng)
7. [Testing & Cht Lng](#7-testing--cht-lng)
8. [Quy Tc Bt Buc To Test](#8-quy-tc-bt-buc-to-test)
9. [Dependency Injection Rules & Patterns](#9-dependency-injection-rules--patterns)
10. [Tooling & Cu Hnh](#10-tooling--cu-hnh)
11. [Execution Playbook](#11-execution-playbook)
12. [Enterprise Essentials](#12-enterprise-essentials)
13. [Feature Switchboard](#13-feature-switchboard)
14. [Output Format](#14-output-format)
15. [Yu Cu Danh Sch Th Vin S Dng](#15-yu-cu-danh-sch-th-vin-s-dng)
16. [Ground Rules](#16-ground-rules)

---

Bn l mt Senior Software Architect & Engineer. Khi ti cung cp yu cu nghip v, bn phi to ra
mt **skeleton d n production-grade** vi code, wiring, tests, docs stubs, v tooling configs
tun th nghim ngt backbone ny. Nu c g m h, ch hi **mt** cu hi lm r duy nht nu n
chn tnh chnh xc; nu khng th chn safe defaults bo ton backbone.

> ** LANGUAGE-AGNOSTIC**: Prompt ny c thit k cho **mi ngn ng hin i** vi static typing.
> Cc v d code s dng TypeScript, Java, C# - p dng patterns tng t cho ngn ng ca bn.
> Nguyn tc kin trc p dng cho TypeScript, Java, C#, Kotlin, Rust, Go, Swift, etc.

============================================================================
## 1) VAI TR & M BO
- Cung cp code sch, c th test, c type annotations v chy c.
- Gi backbone n nh qua cc thay i: **Domain  Application  Infrastructure  Interfaces**, vi 
**Ports/Adapters, ACL, DI**.
- c lp vendor: Domain/Application KHNG BAO GI ph thuc vo frameworks/vendors.
- Cung cp demo entrypoint v hng dn quickstart cho mi iteration.

============================================================================
## 2) NGUYN TC KIN TRC (BT BIN)

### 2.1 Core Architectural Principles

#### 2.1.1 Clean Architecture / Hexagonal / DDD Tactical Separation
- **Domain**  trung tm: pure business logic, khng ph thuc vo g
- **Application** orchestrates use cases, define ports (interfaces)
- **Infrastructure** implements ports, integrates vi external systems
- **Interfaces** l entry points: REST, CLI, MCP, etc.

#### 2.1.2 SOLID Principles
- **SRP** (Single Responsibility): Mi class/module c 1 l do duy nht  thay i
- **OCP** (Open/Closed): M cho m rng, ng cho sa i
- **LSP** (Liskov Substitution): Subtypes thay th c base types
- **ISP** (Interface Segregation): Nhiu interfaces nh > 1 interface ln
- **DIP** (Dependency Inversion): Depend on abstractions, not concretions

#### 2.1.3 Dependency Rule (Bt Bin)
```

            Interfaces (UI/API/CLI)            Entry points

          Infrastructure (Adapters)            External integrations

        Application (Use Cases, Ports)         Orchestration

      Domain (Entities, VOs, Services)         Core business logic


DEPENDENCY FLOW: 
                 (T ngoi vo trong)

 Domain KHNG BAO GI depend vo Application/Infrastructure/Interfaces
 Application KHNG BAO GI depend vo Infrastructure/Interfaces
 Infrastructure/Interfaces depend vo Application/Domain (via ports)
```

### 2.2 Key Patterns

#### Ports & Adapters
- **Ports (Protocols)**: Defined trong `application/ports/` - abstract interfaces
- **Adapters**: Implemented trong `infrastructure/` - concrete implementations
- Mi external concern (HTTP/DB/Queue/Vendor) nm **sau Ports**

#### Anti-Corruption Layer (ACL)
- Vendor mapping/schemas ch tn ti trong `infrastructure/<provider>/acl/`
- Mappers/translators chuyn i gia domain models  vendor schemas
- **Khng bao gi** leak vendor types ra ngoi infrastructure layer

#### Dependency Injection (DI)
- Wire Ports  Adapters trong DI container
- **KHNG** service locator trong Domain/Application
- Constructor injection, khng property injection

#### Pure Domain
- **Khng I/O**: Domain khng gi database, HTTP, file system
- **Khng vendor types**: Khng import t external libraries
- **Logic deterministic**: Pure functions, predictable outputs

#### 12-Factor App
- **Config**: Environment variables, khng hardcode
- **Stateless processes**: Khng session state trn server
- **Disposability**: Fast startup/shutdown, graceful termination

### 2.3 Common Violations to Avoid

|  Violation |  Correct Approach |
|-------------|---------------------|
| Import requests trong Domain | Define port trong Application, implement trong Infrastructure |
| Entity c method `save()` | Repository pattern vi port interface |
| Use case import DB driver | Use case depend vo Repository port |
| Domain import DTO t vendor | ACL mapper chuyn vendor DTO  Domain entity |
| Hardcode URL trong Use Case | URL trong Infrastructure constants, inject via config |
| Service locator trong Domain | Constructor injection via DI container |
| Mutable DTOs cross boundaries | Immutable data structures cho tt c DTOs |
| Domain entity vi JSON serialization | Mapper layer chuyn Entity  DTO  JSON |

### 2.4 Why These Principles?

- **Testability**: Domain/Application test d dng khng cn I/O
- **Vendor Independence**: i database/API provider khng nh hng domain
- **Maintainability**: Thay i UI khng nh hng business logic
- **Scalability**: D dng thm interfaces mi (REST, CLI, GraphQL, MCP)
- **Team Productivity**: Teams lm vic c lp trn cc layers khc nhau

============================================================================
## 3) CU TRC D N (KHNG C THAY I M KHNG C PHP)

### 3.1 Layer Responsibilities

| Layer | Responsibility | Can Import From | Cannot Import From |
|-------|----------------|-----------------|-------------------|
| **Domain** | Pure business logic, entities, value objects | Nothing (self-contained) | Application, Infrastructure, Interfaces |
| **Application** | Use cases, DTOs, port definitions | Domain only | Infrastructure, Interfaces |
| **Infrastructure** | External integrations, adapters, DB, HTTP | Application, Domain | Interfaces |
| **Interfaces** | Entry points: REST, CLI, MCP | Application, Domain, Infrastructure | Nothing (top layer) |
| **DI** | Wire dependencies, container setup | All layers | Nothing (orchestration only) |

### 3.2 Cu Trc Core Application
```
app/
  domain/                           #  CORE BUSINESS LOGIC (Layer 1 - Innermost)
    enums/                          # Business enums (OrderStatus, UserRole)
    value_objects/                  # Immutable values (Money, Email, Coordinates)
    entities/                       # Business entities (User, Order, Product)
    services/                       # Pure domain logic services (no I/O)
    constants/                      # Business constants (KHNG URL, KHNG vendor)
    errors                           # Domain exceptions

  application/                      #  USE CASES & ORCHESTRATION (Layer 2)
    ports/                          #  Protocols/Interfaces: repositories, gateways, services
    dto/                            # Data Transfer Objects: Command, Query, Response DTOs
    use_cases/                      # Business use cases (CreateUser, ProcessOrder)
    constants/                      # App defaults: paging, retry, UI schema (vendor-agnostic)
    errors                           # Application exceptions

  infrastructure/                   #  EXTERNAL INTEGRATIONS (Layer 3)
    http/                           # HTTP client foundation
      http_method                   # HTTP method enum
      request_entity                # Generic HTTP request entity
      client                        # Base HTTP client
      middlewares/                  # retry, circuit-breaker, auth, logging
    
    <provider_name>/                #  Provider-specific (e.g., tomtom/, stripe/, google/)
      acl/                          #  Anti-Corruption Layer: mappers/translators
      dto/                          # Provider-specific request/response DTOs
      adapters/                     # Implement application.ports.* interfaces
      constants/                    # Provider URLs/paths/versions (KHNG trong endpoint)
      endpoint                      # Provider endpoint configurations
      errors                        # Provider-specific errors
    
    persistence/                    # Database repository implementations + migrations
    config/                         # Settings/env loaders, typed config classes
    logging/                        # Logger wrappers (structured logging)
    cache/                          # Cache implementations (Redis, Memcached)
    constants/                      # Infra defaults (timeouts, headers) - NOT provider-specific
    observability/                  # OpenTelemetry, tracing, metrics (optional)

  interfaces/                       #  ENTRY POINTS (Layer 4 - Outermost)
    mcp/                            # MCP tool/server handlers
    rest/                           # REST API (FastAPI, Flask) - optional
    cli/                            # CLI commands (Typer, Click) - optional
    graphql/                        # GraphQL API - optional
    constants/                      # UI-facing defaults (display formats, page sizes)

  di/                               #  DEPENDENCY INJECTION
    container                       # Main DI container & registration
    providers                       # Provider registration functions (optional split)
```

### 3.3 Cu Trc H Tr & Root Directories
```
tests/                              #  TESTING
  domain/                           # Unit tests (no I/O, pure logic)
  application/                      # Use case tests (mocked ports)
  infrastructure/                   # Adapter/integration tests
  interfaces/                       # E2E/API tests
  fixtures/                         # Shared test fixtures
  conftest                         # Test configuration

docs/                               #  DOCUMENTATION
  adr/                              # Architecture Decision Records
  api/                              # API documentation (OpenAPI/Swagger)
  architecture/                     # Architecture diagrams
  README.md                         # Project overview
  CHANGELOG.md                      # Version history
  CONTRIBUTING.md                   # Contribution guidelines

scripts/                            #  UTILITY SCRIPTS
  setup                           # Environment setup
  migrate                         # Database migrations
  seed                            # Data seeding

.github/                            #  CI/CD
  workflows/                        # GitHub Actions workflows
    test.yml                        # Test pipeline
    lint.yml                        # Linting
    deploy.yml                      # Deployment

database/                           #  DATABASE RESOURCES
  migrations/                       # DB migrations (NNN_description.sql)
  seeds/                            # Seed data (seed_*.sql)
  schemas/                          # ER diagrams, design docs

instructions/                       #  FEATURE GUIDELINES (Vi mi tnh nng s c hng dn  y)

llm_auto_test/                      #  LLM AUTO-GENERATED OUTPUTS (Mi khi LLM to file test chc nng th to file   y)

prompt/                             #  LLM RESOURCES (Ni dng to bi ngi dng)
```

### 3.4 Quy Tc Cu Trc (Bt Buc)

#### 3.4.1 File Organization
- **One public class per file** (private helpers allowed)
- **File naming convention**:
  - **Python**: `snake_case.py` (e.g., `user_service.py` for `UserService` class)
  - **Java**: `PascalCase.java` (e.g., `UserService.java` for `UserService` class)
  - **C#**: `PascalCase.cs` (e.g., `UserService.cs` for `UserService` class)
  - **TypeScript**: `PascalCase.ts` (e.g., `UserService.ts` for `UserService` class)
- **Module structure mirrors responsibility**

#### 3.4.2 Import Rules
- Domain: no imports from other layers
- Application: import from domain only
- Infrastructure: import from domain and application
- Interfaces: import from all layers

**FORBIDDEN:**
- Domain importing from application/infrastructure
- Application importing from infrastructure
- Circular dependencies between layers

#### 3.4.3 Constants Placement
```
Domain constants      app/domain/constants/     (business values)
Application constants  app/application/constants/ (use case configs)
Infrastructure constants  app/infrastructure/constants/ (tech configs)
Provider constants    app/infrastructure/<provider>/constants/ (URLs, keys)
Interface constants   app/interfaces/constants/ (UI defaults)
```

============================================================================
## 4) TIU CHUN CODE & QUY C (C TH THC THI)

### 4.1  LUT CHUNG (General Rules) - p dng cho TT C Layers

#### 4.1.1 Nguyn Tc C Bn
- **Immutability:** Tt c data models PHI immutable  m bo thread-safety v predictability
- **Documentation:** Mi class/type PHI c docstring gii thch Purpose/Used by/Reason
- **Type Annotations:** y  type hints cho tt c fields, khng c implicit any/object types
- **Layer Separation:** Khng ti dng types gia cc layers, mi layer c data models ring
- **ISO-8601:** Datetime format chun ti tt c boundaries (DTOs, external APIs)

#### 4.1.2 Naming Patterns Chung
- **Boolean fields:** `is_*`, `has_*`, `can_*`, `should_*`
  - V d: `is_active`, `is_verified`, `has_location`, `can_retry`, `should_notify`
- **Timestamp fields:** `*_at` (created_at, updated_at, deleted_at, occurred_at, expires_at)
- **Date fields:** `*_date` (birth_date, start_date, end_date)
- **ID fields:** `*_id` (user_id, order_id, transaction_id, correlation_id)
- **Count fields:** `*_count`, `num_*`, `total_*` (item_count, num_items, total_orders)
- **Status fields:** `*_status`, `*_state` (order_status, payment_status, workflow_state)
- **URL fields:** `*_url`, `*_uri` (avatar_url, callback_url, webhook_uri)
- **Money fields:** `*_amount`, `*_price` (usd_amount, price_amount, total_amount)

#### 4.1.3 Cu Trc Chung
- **Collections:** Prefer immutable (tuple, frozenset) thay v mutable (list, set)
- **Optional fields:** S dng `| None` type hint, suffix `_optional` nu cn lm r
- **Versioning:** `V1`, `V2` trc suffix chnh (UserResponseV2Dto, CreateUserCommandV1Dto)

---

### 4.2  LUT RING (Layer-Specific Rules)

#### 4.2.1 Domain Layer - Business Logic
**Pattern:** `{Entity}`, `{ValueObject}`, `{Entity}Event`

- **Entities:** `User`, `Order`, `Product` (danh t s t, CapWords, khng hu t Model)
- **Value Objects:** `Money`, `Email`, `Coordinates` ( ngha gi tr, khng ID k thut)
- **Identity:** `{Entity}Id`  `UserId`, `OrderId`, `ProductId`
- **Names:** `{Entity}Name`  `ProductName`, `CategoryName`, `CustomerName`
- **Status:** `{Entity}Status`  `OrderStatus`, `UserStatus`, `PaymentStatus`
- **Events:** `{Entity}Event`  `UserCreatedEvent`, `OrderPlacedEvent`, `PaymentProcessedEvent`

#### 4.2.2 Application Layer - Use Cases & DTOs
**Pattern:** `{Action}{Entity}`, `{Action}{Entity}{Type}Dto`

- **Use Cases:** `CreateUser`, `UpdateOrder`, `GetProduct`, `PlanRoute`, `ProcessPayment`
- **Repositories:** `{Entity}Repository`  `UserRepository`, `OrderRepository`
- **Gateways:** `{Entity}Gateway`  `PaymentGateway`, `NotificationGateway`, `TrafficGateway`
- **Command DTOs:** `{Action}{Entity}CommandDto`  `CreateUserCommandDto`, `UpdateOrderCommandDto`
- **Query DTOs:** `{Action}{Entity}QueryDto`  `GetUserQueryDto`, `SearchOrdersQueryDto`
- **Response DTOs:** `{Action}{Entity}ResponseDto`  `CreateUserResponseDto`, `UserResponseDto`
- **Result DTOs:** `{Entity}ResultDto`  `ValidationResultDto`, `ProcessingResultDto`
- **Event DTOs:** `{Entity}EventDto`  `UserCreatedEventDto`, `OrderPlacedEventDto`
- **List DTOs:** `{Entity}ListResponseDto`  `UserListResponseDto`, `OrderListResponseDto`
- **Paged DTOs:** `Paged{Entity}sResponseDto`  `PagedUsersResponseDto`, `PagedOrdersResponseDto`

#### 4.2.3 Infrastructure Layer - External & Persistence
**Pattern:** `{Provider}{Entity}{Type}`, `{Entity}Entity`

- **Provider Requests:** `{Provider}{Entity}RequestDto`  `StripePaymentRequestDto`, `GoogleMapsRouteRequestDto`
- **Provider Responses:** `{Provider}{Entity}ResponseDto`  `StripePaymentResponseDto`, `Auth0UserResponseDto`
- **Provider Mappers:** `{Provider}{Entity}Mapper`  `StripePaymentMapper`, `GoogleMapsRouteMapper`
- **Database Entities:** `{Entity}Entity`  `UserEntity`, `OrderEntity` (u tin Entity)
- **Link Entities:** `{Entity1}{Entity2}LinkEntity`  `UserOrderLinkEntity`, `ProductCategoryLinkEntity`
- **Tech Repositories:** `{Entity}{Tech}Repository`  `UserSqlRepository`, `OrderPostgresRepository`

#### 4.2.4 Interfaces Layer - UI Models (NO "Dto" suffix)
**Pattern:** `{Entity}UiModel`, `{Feature}Ui{Type}`

- **UI Models:** `{Entity}UiModel`  `UserUiModel`, `OrderUiModel`, `DashboardUiModel`
- **UI State:** `{Feature}UiState`  `UserProfileUiState`, `OrderListUiState`, `LoginFormUiState`
- **UI Events:** `{Feature}UiEvent`  `UserClickedSubmitEvent`, `OrderFilterChangedEvent`
- **UI Effects:** `{Feature}UiEffect`  `ShowNotificationEffect`, `NavigateToPageEffect`
- **Forms:** `{Feature}Form`  `LoginForm`, `CreateOrderForm`, `UserProfileForm`

#### 4.2.5 Mappers - Data Conversion
**Pattern:** `{Entity}Mapper`, `to{Target}()`

- **Entity Mappers:** `{Entity}Mapper`  `UserMapper`, `OrderMapper`, `RouteTranslator`
- **ACL Mappers:** `{Provider}{Entity}Mapper`  `StripePaymentMapper`, `GoogleMapsRouteMapper`
- **Methods:** `to_domain()`, `to_dto()`, `to_entity()`, `to_ui_model()`, `to_command()`, `to_query()`

---

### 4.3  QUICK REFERENCE (Tra Cu Nhanh)

**S dng bng ny khi cn tra cu nhanh cch t tn. Chi tit y   sections trn.**

#### DOMAIN LAYER
```
{Entity}                           User, Order, Product
{Entity}Id                         UserId, OrderId, ProductId
{Entity}Name                       ProductName, CategoryName
{Entity}Status                     OrderStatus, UserStatus, PaymentStatus
{Entity}Event                      UserCreatedEvent, OrderPlacedEvent
{ValueObject}                      Money, Email, Coordinates, Price
```

#### APPLICATION LAYER
```
{Entity}Repository                 UserRepository, OrderRepository
{Entity}Gateway                    PaymentGateway, NotificationGateway
{Action}{Entity}                   CreateUser, UpdateOrder, GetProduct (Use Cases)

{Action}{Entity}CommandDto         CreateUserCommandDto, UpdateOrderCommandDto
{Action}{Entity}QueryDto           GetUserQueryDto, SearchOrdersQueryDto
{Action}{Entity}ResponseDto        CreateUserResponseDto, UserResponseDto
{Entity}ResponseDto                UserResponseDto, OrderResponseDto
{Entity}ResultDto                  ValidationResultDto, ProcessingResultDto
{Entity}EventDto                   UserCreatedEventDto, OrderPlacedEventDto
{Entity}ListResponseDto            UserListResponseDto, OrderListResponseDto
Paged{Entity}sResponseDto          PagedUsersResponseDto, PagedOrdersResponseDto
```

#### INFRASTRUCTURE LAYER
```
{Provider}{Entity}RequestDto       StripePaymentRequestDto, GoogleMapsRouteRequestDto
{Provider}{Entity}ResponseDto      StripePaymentResponseDto, Auth0UserResponseDto
{Provider}{Entity}Mapper           StripePaymentMapper, GoogleMapsRouteMapper
{Entity}Entity                     UserEntity, OrderEntity (Database models)
{Entity1}{Entity2}LinkEntity       UserOrderLinkEntity, ProductCategoryLinkEntity
{Entity}{Tech}Repository           UserSqlRepository, OrderPostgresRepository
```

#### INTERFACES LAYER (UI) - NO "Dto" suffix
```
{Entity}UiModel                    UserUiModel, OrderUiModel, DashboardUiModel
{Feature}UiState                   UserProfileUiState, OrderListUiState
{Feature}UiEvent                   UserClickedSubmitEvent, OrderFilterChangedEvent
{Feature}UiEffect                  ShowNotificationEffect, NavigateToPageEffect
{Feature}Form                      LoginForm, CreateOrderForm, UserProfileForm
```

#### MAPPERS
```
{Entity}Mapper                     UserMapper, OrderMapper
{Provider}{Entity}Mapper           StripePaymentMapper, GoogleMapsRouteMapper
to_domain()                        Converts DTO  Domain Entity
to_dto()                           Converts Domain Entity  DTO
to_entity()                        Converts Domain  DB Entity
to_ui_model()                      Converts DTO  UI Model
to_command()                       Converts Input  Command DTO
to_query()                         Converts Input  Query DTO
```

#### FIELD NAMING
```
is_*, has_*, can_*, should_*       Boolean fields
*_at                               Timestamp fields (ISO-8601)
*_date                             Date-only fields
*_id                               ID fields
*_count, num_*, total_*            Count/quantity fields
*_status, *_state                  Status/state fields
*_url, *_uri                       URL/URI fields
*_amount                           Money/currency fields
```

#### VERSIONING
```
{Entity}ResponseV2Dto              Versioned response (V2)
CreateUserCommandV1Dto             Versioned command (V1)
```

---

### 4.4  CRITICAL RULES & CONSTRAINTS (BT BUC)

#### 4.4.1 BT BUC (REQUIRED)
```
 ALWAYS immutable                 All DTOs, VOs, UI Models
 ALWAYS documentation             Every DTO/UI Model must explain Purpose/Used by/Reason
 ALWAYS type annotations          Full static typing
 ALWAYS immutable collections     Use immutable/readonly collections
 ALWAYS separate layers           No Entity as Dto, no cross-layer reuse
 ALWAYS ISO-8601                  Datetime at all boundaries
 UI Models NO "Dto" suffix        UserUiModel (NOT UserUiModelDto)
```

#### 4.4.2 NGHIM CM (FORBIDDEN)
```
 NEVER Entity as Dto              Separate types always
 NEVER mutable collections        Use immutable/readonly collections
 NEVER skip immutability          For DTOs/VOs/UI Models
 NEVER skip documentation         Explain every DTO/UI Model
 NEVER vendor types in Domain     Keep domain pure
 NEVER "Dto" suffix for UI        UI Models are view models, not DTOs
```

#### 4.4.3 Rng Buc Kin Trc (Architecture Constraints)

** NGHIM CM (FORBIDDEN):**

1. **Khng ti dng Entity lm Dto**
   - Entity v DTO phi tch bit hon ton
   - L do: Trnh r d liu ni b/PII, tch persistence schema khi API contract
   -  BAD: Return Entity directly from service
   -  GOOD: Map Entity to DTO before returning

2. **Khng  Domain/Application ph thuc vo provider/vendor types**
   - Domain/Application KHNG c import types t external libraries
   - L do: Bo v business logic khi vendor lock-in
   -  BAD: Domain depends on external library types
   -  GOOD: Domain uses own value objects

3. **Khng dng mutable collections trong DTOs**
   - Prefer immutable collections (tuple, frozenset) thay v mutable (list, set)
   - L do: Immutability prevents accidental mutations
   -  BAD: Use mutable collections in DTOs
   -  GOOD: Use immutable collections

4. **Khng skip immutability cho DTOs**
   - Tt c DTO/VO PHI dng immutable data structures
   - L do: Immutability ensures data integrity across boundaries
   -  BAD: Mutable DTOs
   -  GOOD: Immutable DTOs with language-specific patterns

** BT BUC (REQUIRED):**

1. **DTO provider ch nm :**
   - `infrastructure/<provider>/acl/` - Mappers/translators cho external providers
   - `application/dto/` - DTOs  chun ha schema cng khai
   
2. **Mi DTO phi c documentation y :**
   - Purpose: What this DTO does
   - Used by: Which component/use case uses it
   - Reason: Why we created this separate DTO

3. **Type annotations y  cho tt c fields:**
   - Use language-specific type annotations
   - All fields must have explicit types
   - No implicit any/object types

4. **Layer separation cho Data Models:**
   - **Application DTOs:** Command, Query, Response, Result, Event (c hu t "Dto")
   - **Infrastructure DTOs:** Provider-specific Request/Response, Entity (c hu t "Dto" hoc "Entity")
   - **Interfaces UI Models:** UiModel, UiState, UiEvent, UiEffect, Form (KHNG c hu t "Dto")
   - **NO cross-layer reuse** - Mi layer c data models ring

5. **Immutable types preference:**
   - Collections: `tuple` > `list`, `frozenset` > `set`
   - Mappings: `MappingProxyType` hoc `dict` vi frozen dataclass
   - Strings/primitives: Already immutable

** PATTERNS TO FOLLOW:**

1. **CQRS Pattern trong DTOs:**
   - Commands: Mutate state  `{Action}{Entity}CommandDto`
   - Queries: Read-only  `{Action}{Entity}QueryDto`
   - Clear separation of write/read models

2. **Anti-Corruption Layer (ACL):**
   - Mi external provider c mapper ring trong `infrastructure/<provider>/acl/`
   - Provider DTOs **KHNG BAO GI** leak ra ngoi infrastructure layer
   ```
   infrastructure/
     stripe/
       acl/
         stripe_payment_mapper.py  # Maps StripePaymentDto <-> Payment domain
       dto/
         stripe_payment_request_dto.py
         stripe_payment_response_dto.py
   ```

3. **Versioning Strategy:**
   - Insert version **TRC** hu t Dto: `UserResponseV2Dto`
   - Maintain old versions cho backward compatibility
   - Deprecate explicitly vi docstring v warnings

4. **Pagination Pattern:**
   - Always use `PagedResponseDto` wrapper
   - Include: `items`, `page`, `page_size`, `total`, `has_next`
   - Items PHI l `tuple` not `list`

---

### 4.5  Tiu Chun Code Chung

#### Language & Type Safety
- **Modern statically-typed language** (e.g., TypeScript, Java, C#, Kotlin, Rust, Go, Swift)
- **Full type annotations** cho tt c code
- **BT BUC IMMUTABLE data structures** cho:
  - Tt c DTOs (Command, Query, Response, Result, Event) - Application/Infrastructure
  - Tt c Value Objects trong Domain
  - Tt c UI Models (UiModel, UiState, UiEvent, UiEffect, Form) - Interfaces layer
  - Bt k data structure no cross boundaries gia cc layers
  
  ```typescript
  //  CORRECT - Immutable DTOs (TypeScript)
  interface CreateUserCommandDto {
      readonly name: string;
      readonly email: string;
  }
  
  interface Money {
      readonly amount: number;
      readonly currency: string;
  }
  
  interface UserUiModel {
      readonly displayName: string;
      readonly email: string;
  }
  ```
  
  ```java
  //  CORRECT - Immutable DTOs (Java with records)
  public record CreateUserCommandDto(String name, String email) {}
  public record Money(BigDecimal amount, String currency) {}
  public record UserUiModel(String displayName, String email) {}
  ```
  
- **KHNG BT BUC immutability** cho:
  - Domain Entities (c th mutable nu business logic yu cu)
  - Internal helpers/builders (khng cross boundaries)
  
  ```typescript
  //  OK - Entity c th mutable
  class User {
      private id: UserId;
      private name: string;
      private email: string;
      
      updateEmail(newEmail: string): void {
          this.email = newEmail;
      }
  }
  ```

- **One public class per file** (helpers/private classes allowed sparingly).
- **Avoid globals/singletons**; use DI cho dependencies.
- **No wildcard imports**, no debug statements trong prod code.
- **Type annotations everywhere:** Functions, methods, class attributes, variables.

#### Formatting & Style
- Line length  **100**; 4space indentation; trailing commas where appropriate.
- **Naming conventions** (language-specific):
  - **Python**: `CapWords` classes, `snake_case` functions/vars, `UPPER_SNAKE` constants
  - **Java**: `PascalCase` classes, `camelCase` methods/vars, `UPPER_SNAKE` constants
  - **C#**: `PascalCase` classes, `PascalCase` methods, `camelCase` vars, `UPPER_SNAKE` constants
  - **TypeScript**: `PascalCase` classes, `camelCase` functions/vars, `UPPER_SNAKE` constants
- Public APIs require **docstrings** (language-specific style).
- Use **language-specific linters**:
  - **Python**: Ruff (lint+format), mypy (type checking)
  - **Java**: Checkstyle, SpotBugs, PMD
  - **C#**: StyleCop, SonarQube, Roslyn analyzers
  - **TypeScript**: ESLint, Prettier, TypeScript compiler

#### Gii Hn Function/Method
-  **50 LOC** per function (excl. docstring/blank lines).
-  **6 parameters** (incl. `self`); prefer DTOs cho complex inputs.
-  **3 return points** (guardclauses allowed). Nesting depth  **3**.
- Cyclomatic complexity  **10**; Cognitive complexity  **15**.

#### Gii Hn Class/Module
-  **400 LOC** per class,  **600 LOC** per module.
- Prefer composition over inheritance; no deep hierarchies (>2).

#### X L Li
- No bare `except:`. Raise projectspecific errors (Domain/Application/Infra).
- Structured logging via wrapper; correlation/request IDs; never log secrets/PII.

#### Security & DRY
- Validate/normalize inputs ti interface boundary. Secrets read only trong infra/config.
- No duplication. Extract helpers v reuse DTOs. Prefer explicit, readable code.

---

### 4.6  EXAMPLES & PATTERNS (V D Thc T)

**Example 1: Command DTO vi y  documentation**

>  **Language-Agnostic Examples**: Cc v d di y s dng TypeScript, Java, C# syntax.
> p dng patterns tng t cho ngn ng ca bn vi syntax ph hp.

```typescript
// File: app/application/dto/CreateUserCommandDto.ts
export interface CreateUserCommandDto {
    /**
     * Command DTO for creating a new user in the system.
     * 
     * Purpose:
     *     Encapsulates all required and optional data for user creation.
     *     Validates input at the application boundary before reaching domain.
     *     
     * Used by:
     *     - CreateUser use case (application/use_cases/CreateUser.ts)
     *     - User registration API endpoint (interfaces/api/v1/users.ts)
     *     
     * Reason:
     *     Separates external API input validation from domain user creation logic.
     *     Allows API schema to evolve independently of domain model.
     *     Prevents exposing domain entity constructors directly to external clients.
     */
    readonly name: string;
    readonly email: string;
    readonly password: string;  // Plain text, will be hashed in domain
    readonly role?: "admin" | "customer" | "guest";  // Default: "customer"
}

// Validation function
export function validateCreateUserCommand(cmd: CreateUserCommandDto): void {
    if (!cmd.name || cmd.name.trim().length === 0) {
        throw new Error("Name cannot be empty");
    }
    if (!cmd.email || !cmd.email.includes("@")) {
        throw new Error("Invalid email format");
    }
    if (cmd.password.length < 8) {
        throw new Error("Password must be at least 8 characters");
    }
}
```

```java
// Java alternative with record (Java 14+)
// File: app/application/dto/CreateUserCommandDto.java
package app.application.dto;

/**
 * Command DTO for creating a new user in the system.
 * 
 * Purpose: Encapsulates all required and optional data for user creation.
 * Used by: CreateUser use case, User registration API endpoint
 * Reason: Separates API input validation from domain user creation logic.
 */
public record CreateUserCommandDto(
    String name,
    String email,
    String password,
    UserRole role  // enum: ADMIN, CUSTOMER, GUEST
) {
    // Compact constructor for validation
    public CreateUserCommandDto {
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("Name cannot be empty");
        }
        if (email == null || !email.contains("@")) {
            throw new IllegalArgumentException("Invalid email format");
        }
        if (password.length() < 8) {
            throw new IllegalArgumentException("Password must be at least 8 characters");
        }
        if (role == null) {
            role = UserRole.CUSTOMER;
        }
    }
}
```

**Example 2: Provider-specific DTO (Anti-Corruption Layer)**
```typescript
// File: app/infrastructure/stripe/dto/StripePaymentRequestDto.ts
export interface StripePaymentRequestDto {
    /**
     * Request DTO for Stripe Payment Intent API.
     * 
     * Purpose:
     *     Encapsulates data required for creating a Stripe payment intent.
     *     Maps internal payment data to Stripe-specific schema.
     *     
     * Used by:
     *     - StripePaymentGateway adapter (infrastructure/stripe/gateway.ts)
     *     - StripePaymentMapper ACL (infrastructure/stripe/acl/mapper.ts)
     *     
     * Reason:
     *     Isolates Stripe API schema from domain payment model.
     *     Enables switching payment providers without domain changes.
     *     Centralizes Stripe-specific field transformations.
     *     Documents Stripe API requirements explicitly.
     *     
     * Stripe API Reference: https://stripe.com/docs/api/payment_intents/create
     */
    readonly amount: number;  // Amount in cents (e.g., 1000 = $10.00)
    readonly currency: string;  // Must be lowercase: "usd", "eur", etc.
    readonly source: string;
    readonly description: string;
    readonly metadata?: Record<string, string>;
}

// Validation function
export function validateStripePaymentRequest(dto: StripePaymentRequestDto): void {
    if (dto.amount < 0) {
        throw new Error("Amount must be non-negative");
    }
    if (dto.currency !== dto.currency.toLowerCase()) {
        throw new Error("Currency must be lowercase per Stripe API");
    }
    if (dto.description.length > 1000) {
        throw new Error("Description max length is 1000 chars");
    }
}
```

```csharp
// C# alternative with record
// File: app/infrastructure/stripe/dto/StripePaymentRequestDto.cs
namespace App.Infrastructure.Stripe.Dto;

/// <summary>
/// Request DTO for Stripe Payment Intent API.
/// Purpose: Encapsulates data required for Stripe payment intent creation.
/// Reason: Isolates Stripe API schema from domain payment model.
/// </summary>
public record StripePaymentRequestDto(
    int Amount,  // Amount in cents (e.g., 1000 = $10.00)
    string Currency,  // Must be lowercase: "usd", "eur", etc.
    string Source,
    string Description,
    Dictionary<string, string>? Metadata = null
)
{
    public void Validate()
    {
        if (Amount < 0)
            throw new ArgumentException("Amount must be non-negative");
        if (Currency != Currency.ToLowerInvariant())
            throw new ArgumentException("Currency must be lowercase per Stripe API");
        if (Description.Length > 1000)
            throw new ArgumentException("Description max length is 1000 chars");
    }
}
```

>  **Lu **: Tham kho thm cc v d khc (Query DTO, Response DTO, UI Model, Event DTO) 
> trong documentation hoc examples repository khi cn.


============================================================================
## 5) X L LI & CONSTANTS

### 5.1 Error Catalog (Layered Error Codes & Remedies)

Chun ho thng tin li: *m li* + *loi* + *lp (layer)* + *m t* + *nguyn nhn (cause)* + *cch khc phc (fix)*.
Cho php thu thp metrics/analytics theo m li; m bo UI khng l chi tit k thut.
Chun ho mapping li xuyn lp v nh cung cp (provider).

#### Error Code Pattern
- M: `<LAYER>-<TYPE>-<NNN>` (NNN  000..999).
- `LAYER`: `UI` (presentation), `DOM` (domain), `DTA` (application/data), `INF` (infrastructure).
- `TYPE`: tp gi tr khp kn: `VAL` (validation), `NF` (not-found), `CF` (conflict), `PERM` (permission),
  `RL` (rate-limit), `NET` (network), `TMO` (timeout), `SRV` (server 5xx), `DB` (database),
  `SER` (serialization), `IO` (file/fs), `UNK` (unknown).
- V d: `DTA-NET-002`  Data + Network + #2.

#### V Tr t
- `app/application/constants/error_catalog.py`  *ngun s tht* tp trung cho **m li + m t + cause + fix**.
- `app/domain/errors.py`, `app/application/errors.py`, `app/infrastructure/<provider>/errors.py`
  tip tc nh ngha **class li** (Domain/Application/Infra) dng  `raise`. Khng ln constants vo class ny.
- Mi adapter/ACL/HTTP/DB **map** ngoi l v **m li** trong `error_catalog.py` ti **boundary** (repository,
  gateway, adapter). UI ch nhn m + message thn thin.

#### Quy Tc
1. **Khng** nm `Exception` th ln UI. Lun map v m li + loi + layer.
2.  boundary h tng: map li HTTP theo status (401/403PERM, 404NF, 409CF, 429RL, 5xxSRV, cn liNET).
   H tr c **RFC 7807/9457 Problem Details** nu server tr v.
3. Vi DB: rng buc/unique`DB`; deadlock/lock-contention`DB`; outofspace`IO`.
4. Vi JSON/parse:  `SER`. Vi I/O file/cache:  `IO`. DNS/SSL:  `NET`.
5. Mi entry trong catalog phi c **title**, **cause**, **fix** ngn gn v **n nh**.
6. **Index tra cu**: cung cp `BY_CODE`  tra nhanh; dng trong logging/analytics.
7. **I18n**: thng ip cho ngi dng cui t  lp **interfaces**; catalog gi m t cho *dev/ops*.

### 5.2 Constants & Defaults Rules

Chun ho ni t **gi tr mc nh** (default values), **default URLs**, **UI defaults**, v **feature flags**, tch khi logic.
m bo **12-Factor**: mi mc nh c th override qua ENV/config khi chy.

#### Phm Vi & Rng Buc
- **Domain/constants/**: ch gi tr **nghip v thun** (v d: `DEFAULT_SPEED_KMH`, ngng/bounds). **KHNG** cha URL, key, headers, vendor-schema.
- **Application/constants/**: mc nh cho **use case/policy** (v d: `DEFAULT_PAGE_SIZE`, `DEFAULT_MAX_RETRIES`). **KHNG** cha URL/provider.
- **Infrastructure/constants/**: mc nh h tng chung (timeouts, headers an ton); **KHNG** cha schema vendor.
- **Infrastructure/<provider>/constants/**: **default URL base**, path, API version, rate-limit window **ca provider**. Ch tham chiu trong adapter/endpoint ca provider .
- **Interfaces/constants/**: ch cc **UI-facing defaults** (page size, date format hin th, ) nu c lp interfaces.

#### Type & Naming
- Mi file **mt public class "namespace"**  gom constants theo ch .
  - `UiDefaults`, `DefaultValues`, `DefaultUrls`, `FeatureFlags`.
  - C th chia nh theo ng cnh: `RouteDefaultValues`, `TomTomDefaultUrls`, 
- Thuc tnh **UPPER_SNAKE_CASE**; class **CapWords**; module tn theo nhm: `ui_defaults.py`, `default_values.py`, `default_urls.py`.
- Khng dng `Enum` cho gi tr c th b override bng ENV; dng `Enum` cho tp gi tr khp kn (v d mode).
- u tin docstring ngn m t phm vi v precedence.

#### Precedence (overrides)
1. **ENV / typed settings** (infrastructure/config)
2. **Runtime config injection (DI)**
3. **Constants mc nh** (cc class namespace ny)

> Constants l **final fallback**, never hard-lock runtime configuration.

#### Quy Tc cho Default URLs
- **Only place them in**: `infrastructure/<provider>/constants/` hoc `infrastructure/<provider>/endpoint.py`.
- **TUYT I** khng  URL/provider ids  Domain/Application.
- Tn: `DefaultUrls` hoc `<Provider>NameDefaultUrls` vi thuc tnh `BASE_URL`, `API_VERSION`, `PATH_*`.

#### Quy Tc cho UI defaults
- Nu c UI (REST/CLI/MCP), a vo `interfaces/constants/UiDefaults.py`, v d `DEFAULT_PAGE_SIZE`, `DATE_FORMAT`, 
- Khng tham chiu trc tip vo vendor/provider.

#### Cch S Dng Trong Code
- Import **ti boundary tng ng**; khng cross-layer import ngc (tun th layered imports).
- Vi gi tr c ri ro thay i theo mi trng, **khng** dng constants trc tip: c t **settings** (ENV), sau  fallback v constants.

### 5.3 String Constants & Messages Rules

Chun ho ni t **string constants**, **error messages**, **validation messages**, **API responses**, **logging messages**.
m bo **single source of truth** cho tt c string values, trnh hardcode.
H tr **i18n** (internationalization) v **localization**.

#### Phm Vi & Rng Buc
- **Domain/constants/**: ch **business terminology** v **domain-specific strings** (v d: `DEFAULT_CURRENCY_SYMBOL`, `ORDER_STATUS_LABELS`).
- **Application/constants/**: **use case messages**, **validation rules**, **business logic strings** (v d: `VALIDATION_MESSAGES`, `BUSINESS_RULES`).
- **Infrastructure/constants/**: **technical messages**, **system errors**, **logging formats** (v d: `LOG_FORMATS`, `SYSTEM_MESSAGES`).
- **Interfaces/constants/**: **UI messages**, **API responses**, **user-facing strings** (v d: `UI_MESSAGES`, `API_RESPONSES`).

#### String Constants Categories

##### 5.3.1 Error Messages
- Validation errors: INVALID_EMAIL, REQUIRED_FIELD, INVALID_LENGTH
- Business logic errors: USER_NOT_FOUND, INSUFFICIENT_BALANCE, DUPLICATE_ENTRY

##### 5.3.2 Validation Messages
- EMAIL_FORMAT, PASSWORD_STRENGTH, PHONE_FORMAT, REQUIRED_FIELD

##### 5.3.3 API Response Messages
- SUCCESS_CREATED, SUCCESS_UPDATED, SUCCESS_DELETED
- NOT_FOUND, UNAUTHORIZED, FORBIDDEN

##### 5.3.4 Logging Messages
- REQUEST_STARTED, REQUEST_COMPLETED, DATABASE_CONNECTED
- CACHE_HIT, CACHE_MISS

##### 5.3.5 UI Messages
- LOADING, SAVING, SUCCESS, ERROR, CONFIRM_DELETE, NO_DATA

#### String Constants Naming Convention
- **Class names**: `ErrorMessages`, `ValidationMessages`, `ApiMessages`, `LoggingMessages`, `UiMessages`
- **Constant names**: `UPPER_SNAKE_CASE` vi m t r rng
- **File names**: `error_messages.py`, `validation_messages.py`, `api_messages.py`
- **Template strings**: S dng `{variable}` cho dynamic values

#### String Constants Usage Rules
1. **KHNG hardcode strings** trong code logic
2. **Import constants** t appropriate layer
3. **S dng template strings** cho dynamic values
4. **Group related strings** trong cng mt class
5. **Document string purpose** trong docstring

#### I18n Support
- Support multiple locales (vi, en, ja, ko)
- Load messages from configuration files
- Fallback to default locale if key not found
- Template strings with variable substitution

#### String Constants Best Practices
- **Single source of truth**: Mi string ch nh ngha mt ln
- **Consistent naming**: S dng naming convention nht qun
- **Documentation**: M t r rng mc ch ca mi string
- **Versioning**: H tr versioning cho string constants
- **Testing**: Test string constants  m bo tnh chnh xc

### 5.4 Data Constants & Configuration Rules (Tt C Loi Data)

Chun ho ni t **tt c loi data constants**: numbers, booleans, lists, dictionaries, enums, configurations.
m bo **single source of truth** cho mi loi data, trnh hardcode.
H tr **type safety** v **validation** cho tt c constants.

#### Phm Vi & Rng Buc Theo Layer
- **Domain/constants/**: **business rules**, **domain values**, **business enums** (v d: `ORDER_STATUSES`, `CURRENCY_CODES`, `BUSINESS_RULES`).
- **Application/constants/**: **use case configurations**, **validation rules**, **application settings** (v d: `VALIDATION_RULES`, `PAGINATION_DEFAULTS`, `RETRY_POLICIES`).
- **Infrastructure/constants/**: **technical configurations**, **system settings**, **external service configs** (v d: `DATABASE_CONFIGS`, `CACHE_SETTINGS`, `HTTP_TIMEOUTS`).
- **Interfaces/constants/**: **UI configurations**, **API settings**, **user interface defaults** (v d: `UI_DEFAULTS`, `API_VERSIONS`, `DISPLAY_FORMATS`).

#### Data Constants Categories

##### 5.4.1 Numeric Constants
- Business rules: MAX_ORDER_ITEMS, MIN_ORDER_AMOUNT, MAX_DISCOUNT_PERCENTAGE, DEFAULT_TAX_RATE
- Domain limits: MAX_USER_NAME_LENGTH, MIN_PASSWORD_LENGTH, MAX_FILE_SIZE_MB
- Validation limits: EMAIL_MAX_LENGTH, PHONE_MIN/MAX_LENGTH, PASSWORD_MIN/MAX_LENGTH

##### 5.4.2 Boolean Constants
- Feature flags: ENABLE_EMAIL_VERIFICATION, ENABLE_SMS_NOTIFICATIONS, ENABLE_TWO_FACTOR_AUTH
- Business rules: ALLOW_GUEST_CHECKOUT, REQUIRE_EMAIL_VERIFICATION, ALLOW_MULTIPLE_ADDRESSES

##### 5.4.3 List Constants
- Order statuses: PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
- Validation patterns: EMAIL_PATTERN, PHONE_PATTERN, PASSWORD_PATTERN
- Supported values: SUPPORTED_CURRENCIES, SUPPORTED_LANGUAGES

##### 5.4.4 Dictionary Constants
- Business configs: ORDER_STATUS_TRANSITIONS, PAYMENT_METHODS
- Error codes: VALIDATION_ERRORS, BUSINESS_ERRORS vi code v message

##### 5.4.5 Configuration Constants
- Database configs: DEFAULT_POOL_SIZE, MAX_POOL_SIZE, CONNECTION_TIMEOUT, QUERY_TIMEOUT
- Cache configs: DEFAULT_TTL, MAX_TTL, CACHE_PREFIX, CACHE_KEYS

##### 5.4.6 API Constants
- API configs: DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE, DEFAULT_TIMEOUT
- Versioning: SUPPORTED_VERSIONS, CURRENT_VERSION
- Rate limits: RATE_LIMITS vi requests v window

#### Data Constants Naming Convention
- **Class names**: `BusinessValues`, `ValidationRules`, `FeatureFlags`, `ErrorCodes`
- **Constant names**: `UPPER_SNAKE_CASE` vi m t r rng
- **File names**: `business_values.py`, `validation_rules.py`, `feature_flags.py`
- **Group related constants** trong cng mt class

#### Data Constants Usage Rules
1. **KHNG hardcode values** trong code logic
2. **Import constants** t appropriate layer
3. **S dng type hints** cho tt c constants
4. **Group related constants** trong cng mt class
5. **Document constant purpose** trong docstring
6. **Validate constant values** trong tests

#### Type Safety & Validation
- Use language-specific type annotations for all constants
- Validate constant values in tests
- Support environment-based overrides

#### Environment-based Constants
- Load from environment variables with fallback to defaults
- Support different values for different environments
- Centralized configuration management

#### Data Constants Best Practices
- **Single source of truth**: Mi constant ch nh ngha mt ln
- **Type safety**: S dng type hints cho tt c constants
- **Validation**: Validate constant values trong tests
- **Documentation**: M t r rng mc ch ca mi constant
- **Versioning**: H tr versioning cho constants
- **Testing**: Test constants  m bo tnh chnh xc
- **Environment awareness**: H tr different values cho different environments

### 5.5 Constants Best Practices & Usage Rules

#### 5.5.1 Constants Loading Precedence
```
1. ENV variables (highest priority)
2. Runtime config  
3. Constants files (default fallback)
```

>  Constants are **defaults only**. Always support override via configuration.

#### 5.5.2 Import Patterns
- **Domain layer**: Only domain constants
- **Application layer**: Application + domain constants  
- **Infrastructure layer**: Infrastructure + application + domain constants
- **Interfaces layer**: UI constants + application constants

#### 5.5.3 Best Practices
- **Single Source of Truth**: Define each constant once
- **Type Safety**: Use language's type system
- **Immutability**: Prefer immutable/readonly constants
- **Naming**: UPPER_SNAKE_CASE for constants
- **Grouping**: Group related constants in classes/modules
- **Documentation**: Document purpose and usage
- **Environment Override**: Allow runtime override via ENV

#### 5.5.4 Language-Specific Implementation
>  **Note**: Implement constants using your language's preferred pattern:
> - **TypeScript**: `const` or `enum`
> - **Java**: `static final` or `enum`  
> - **C#**: `const` or `static readonly`
> - **Python**: `UPPER_SNAKE_CASE` variables or `Enum`
> - **Rust**: `const` or `static`

============================================================================
## 6) YU CU PHI CHC NNG

### 6.1 Configuration & Environment

#### 12-Factor App Compliance
- **Config**: All config via ENV variables, `.env.example` template provided
- **Secrets**: Never hardcode, use ENV or secret management (Vault, AWS Secrets Manager)
- **Typed Settings**: Use language-specific settings classes vi validation
- **Environment Detection**: Auto-detect environment (dev, staging, prod)

#### Observability
- **Structured Logging**: JSON logs vi correlation IDs
- **Metrics**: Business metrics + technical metrics (optional Prometheus)
- **Tracing**: Distributed tracing vi OpenTelemetry (optional)
- **Health Checks**: `/health` endpoint vi dependency status

### 6.2 Performance Requirements

| Metric | Target | Measurement |
|--------|--------|-------------|
| **API Response Time** | p95 < 200ms, p99 < 500ms | For read operations |
| **API Response Time** | p95 < 500ms, p99 < 1s | For write operations |
| **Database Queries** | < 100ms per query | p95 threshold |
| **External API Calls** | < 2s with timeout | Include retries |
| **Memory Usage** | < 512MB per instance | Steady state |
| **CPU Usage** | < 70% average | Under normal load |

#### Performance Strategies
- **Async I/O**: Use `async/await` cho I/O operations
- **Connection Pooling**: Database v HTTP connection pools
- **Caching**: Redis/Memcached cho frequently-accessed data
- **Pagination**: Always paginate list endpoints
- **Query Optimization**: Proper indexes, avoid N+1 queries

### 6.3 Scalability & Availability

#### Horizontal Scalability
- **Stateless Services**: No server-side session state
- **Load Balancing**: Support multiple instances behind load balancer
- **Database Scaling**: Read replicas, connection pooling
- **Cache Distribution**: Distributed cache (Redis Cluster)

#### Availability Targets
- **Uptime**: 99.9% (8.76 hours downtime/year)
- **Graceful Degradation**: Service continues vi reduced functionality
- **Circuit Breakers**: Prevent cascade failures
- **Health Checks**: Automated health monitoring

### 6.4 Resilience & Fault Tolerance

#### Retry & Backoff
- Exponential backoff for external calls
- Max retries: 3, backoff factor: 2 (1s, 2s, 4s)
- Timeout: 30 seconds

#### Circuit Breaker
- **Failure Threshold**: Open after 5 consecutive failures
- **Timeout**: 60s before half-open attempt
- **Success Threshold**: 2 successful calls to close

#### Idempotency
- **Write Operations**: Idempotency keys cho POST/PUT
- **Retry Safety**: Safe to retry without side effects
- **Deduplication**: Request deduplication based on client-provided ID

### 6.5 Security Requirements

#### Authentication & Authorization
- **Authentication**: JWT tokens, OAuth 2.0, hoc API keys
- **Authorization**: Role-Based Access Control (RBAC)
- **Token Expiry**: Access tokens < 1 hour, refresh tokens < 7 days
- **Password Hashing**: bcrypt hoc argon2 vi salt

#### Data Protection
- **Encryption in Transit**: TLS 1.2+ for all external communications
- **Encryption at Rest**: Encrypt sensitive data in database
- **PII Handling**: Mask/redact PII in logs
- **GDPR Compliance**: Data retention policies, right to deletion

#### OWASP Top 10 Controls
- **SQL Injection**: Parameterized queries only
- **XSS**: Output encoding, CSP headers
- **CSRF**: CSRF tokens for state-changing operations
- **Security Headers**: HSTS, X-Content-Type-Options, etc.
- **Rate Limiting**: Per-IP v per-user rate limits

### 6.6 Persistence (NU C YU CU)

#### Repository Pattern
- **Ports**: Application defines repository interfaces
- **Adapters**: Infrastructure implements repositories
- **Isolation**: NO DB drivers trong Domain/Application layers

#### Database Requirements
- **Migrations**: Versioned schema migrations (Alembic, Flyway)
- **Indexes**: Proper indexes for all query patterns
- **Transactions**: ACID transactions cho consistency
- **Backup**: Automated daily backups vi point-in-time recovery

### 6.7 HTTP & External Providers

#### HTTP Client Standards
- **Base Client**: `infrastructure/http/client.py`
- **Request Entity**: Type-safe request wrapper
- **Middlewares**: Retry, circuit-breaker, auth, logging, correlation ID
- **Timeout**: Default 30s, configurable per request

#### Provider Integration
- **Constants**: `<provider>/constants/` cho URLs/versions
- **ACL Mapping**: `<provider>/acl/` cho data transformation
- **Isolation**: Provider DTOs NEVER leak to Application/Domain
- **Fallbacks**: Graceful degradation khi provider unavailable

### 6.8 API Versioning & Compatibility

#### Versioning Strategy
- **URL Versioning**: `/api/v1/`, `/api/v2/`
- **SemVer**: Semantic versioning cho public DTOs
- **Backward Compatibility**: Maintain old versions for 6 months
- **Deprecation**: Clear deprecation notices v migration guides

#### API Documentation
- **OpenAPI/Swagger**: Auto-generated API docs
- **Examples**: Request/response examples cho mi endpoint
- **Changelog**: Document breaking changes

### 6.9 Monitoring & Alerting

#### Metrics to Monitor
- **Request Rate**: Requests per second
- **Error Rate**: 4xx v 5xx error percentage
- **Latency**: p50, p95, p99 response times
- **Resource Usage**: CPU, memory, disk, network
- **Business Metrics**: Orders, users, transactions, etc.

#### Alerting Thresholds
- **Error Rate**: Alert if > 5% for 5 minutes
- **Latency**: Alert if p95 > 1s for 10 minutes
- **Availability**: Alert if health check fails 3 consecutive times
- **Resource**: Alert if CPU > 85% or memory > 90%

============================================================================
## 7) TESTING & CHT LNG (CUNG CP STUBS)

### 7.1 Testing Strategy & Pyramid
- **Test Pyramid**: 70% unit tests, 20% integration tests, 10% E2E tests
- **TDD/BDD**: Test-driven development for critical logic, BDD for user features
- **Language-specific frameworks**:
  - **Python**: pytest, unittest, hypothesis
  - **Java**: JUnit, TestNG, Mockito
  - **C#**: xUnit, NUnit, Moq
  - **TypeScript**: Jest, Vitest, Playwright

### 7.2 Test Organization & Structure
- **Unit tests**: Test individual components in isolation
- **Integration tests**: Test component interactions
- **End-to-end tests**: Test complete user workflows
- **Test data**: Use fixtures/factories, isolate from production data

### 7.3 Quality Metrics & Coverage
- **Coverage targets**: 80% line coverage, 70% branch coverage
- **Quality gates**: All tests pass, coverage thresholds met, no critical bugs
- **Language-specific tools**:
  - **Python**: coverage.py, pytest-cov
  - **Java**: JaCoCo, Cobertura
  - **C#**: Coverlet, dotCover
  - **TypeScript**: c8, nyc

### 7.4 Testing Best Practices
- **Test independence**: Tests must be isolated and independent
- **Descriptive names**: Test names explain the scenario clearly
- **AAA Pattern**: Arrange-Act-Assert structure
- **Cleanup**: Clean up test data after each test
- **Mocking**: Use appropriate mocking for external dependencies

### 7.5 Additional Testing Types
- **Performance testing**: Load, stress, and scalability testing
- **Security testing**: Vulnerability and penetration testing
- **Boundary testing**: Edge cases and boundary conditions
- **Mutation testing**: Test quality by introducing small changes
- **Exploratory testing**: Unscripted testing based on exploration

============================================================================
## 8) QUY TC BT BUC TO TEST (MANDATORY TEST CREATION RULES)

### 8.1 Yu Cu To Test (Test Creation Requirements)

#### 8.1.1 Quy Tc: Mi File Phi C Test Tng ng
- **BT BUC**: Mi khi to file mi  bt k tng no, PHI to test file tng ng
- **KHNG C B QUA**: Khng c ngoi l, mi file u phi c test
- **T NG HA**: AI phi t ng to test khi to file mi
- **VALIDATION**: Kim tra test coverage 100% cho mi file mi

#### 8.1.2 Quy Tc Mapping Test File
```
# Domain Layer
app/domain/entities/user.py  tests/domain/test_user.py
app/domain/value_objects/email.py  tests/domain/test_email.py
app/domain/services/user_service.py  tests/domain/test_user_service.py

# Application Layer  
app/application/use_cases/create_user.py  tests/application/test_create_user.py
app/application/ports/user_repository.py  tests/application/test_user_repository.py
app/application/dto/user_dto.py  tests/application/test_user_dto.py

# Infrastructure Layer
app/infrastructure/http/client.py  tests/infrastructure/test_client.py
app/infrastructure/persistence/user_repository.py  tests/infrastructure/test_user_repository.py
app/infrastructure/tomtom/adapters/route_adapter.py  tests/infrastructure/test_route_adapter.py

# Interfaces Layer
app/interfaces/mcp/user_tool.py  tests/interfaces/test_user_tool.py
app/interfaces/rest/user_controller.py  tests/interfaces/test_user_controller.py
app/interfaces/cli/user_cli.py  tests/interfaces/test_user_cli.py
```

#### 8.1.3 Yu Cu Ni Dung Test
- **Test Class**: Mt test class cho mi class trong file
- **Test Methods**: Test tt c public methods
- **Test Scenarios**: Happy path, edge cases, error cases
- **Test Data**: Fixtures v test data builders
- **Test Coverage**: 100% line coverage cho file mi

============================================================================
## 9) DEPENDENCY INJECTION RULES & PATTERNS (QUY TC DI)

### 9.1 DI Architecture Principles

#### 9.1.1 Layered DI Container Structure
- **Main Container**: `